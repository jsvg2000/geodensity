type Country {
    name: String!
    population: Int!
    area: Float!
    density: Float!
}

type ApiLog {
    id: ID!
    username: String
    request_timestamp: String!
    num_countries_returned: Int!
    countries_details: String!
}

type Query {
    getLogs(startDate: String, endDate: String): [ApiLog]
        @field(resolver: "App\\GraphQL\\Queries\\LogResolver@getLogs")

    topCountries(limit: Int!, username: String): [Country]
        @field(resolver: "App\\GraphQL\\Queries\\CountryResolver@topCountries")
}

type Mutation {
    updateLogUsername(id: ID!, username: String!): ApiLog
        @field(resolver: "App\\GraphQL\\Queries\\LogResolver@updateLogUsername")
    deleteLog(id: ID!): Boolean!
        @field(resolver: "App\\GraphQL\\Queries\\LogResolver@deleteLog")
}
